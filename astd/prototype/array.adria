/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var merge = require('./merge');

export extend = func() {
    merge(ArrayExtensions, Array);
    merge(ArrayExtensions.prototype, Array.prototype);
};

module ArrayExtensions = proto {

    /**
     * returns the first array element id or null
     */
    first: prop {
        get: func() {
            for (var i in this) {
                return parseInt(i);
            }
            return null;
        }
    },

    /**
     * inserts a value at the end of the array and returns its index
     */
    insert: prop {
        value: func(value) {
            return this.push(value) -1;
        }
    },

    /**
     * removes an element from the array, shifts the last element into
     * the position of the removed element and reduces array length by one
     *
     * use the following pattern when iterating over an array while removing
     * elements at the same time:
     *
     * var id = array.length;
     *
     * while (id--) {
     *     if (array[id] matches condition) {
     *         array.remove(id);
     *         break if matching only one item
     *     }
     * }
     */
    remove: prop {
        value: func(id) {
            assert(typeof id === 'number');
            assert(id < this.length);

            this[id] = this[this.length -1];
            return --this.length;
        }
    },

    /**
     * returns a random array element
     */
    random: prop {
        value: func() {
            return this[Math.floor(Math.random() * this.length)];
        }
    },

    //!todo only works for strings
    unique: prop {
        value: func(arr) {
            var hash = Object.create(null), result = [];
            for ( var i = 0, l = this.length; i < l; ++i ) {
                var value = this[i];
                if (value in hash === false) {
                    hash[value] = true;
                    result.push(value);
                }
            }
            return result;
        }
    },
};