/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var merge = require('./merge');

export extend = func() {
    merge(MathExtensions, Math);
};

module MathExtensions = { };

/**
 * picks a random item from given item table
 *
 * @param itemTable object { itemKey.1 : itemChance.1, itemKey.2 : itemChance.2, ... } with sum(itemChance) < = 1
 * @return itemKey or null if total chance < 1 and algorithm did not select an item
 */
export pick = func(itemTable) {

    var chance = Math.random();
    var total = 0;

    for (var id in itemTable) {

        total += itemTable[id];

        if (chance >= (total- itemTable[id]) && chance <= total) {
            return id;
        }
    }

    return null;
};

/**
 * random integer up to range -1 with a quadratic preference for high numbers
 *
 * @param range
 * @return result
 */
export tailDist = func(range) {
    return Math.floor(Math.sqrt(Math.random() * range * range));
};

/**
 * random integer up to range -1 with a quadratic preference for low numbers
 *
 * @param range
 * @return result
 */
export headDist = func(range) {
    return range -1 - Math.floor(Math.sqrt(Math.random() * range * range));
};

/**
 * returns a random float value
 *
 * @param min minimum value to return
 * @param max maximum value to return
 * @return result
 */
export rand = func(min, max) {
    return Math.random() * (max - min) + min;
};

/**
 * returns a random integer value
 *
 * @param min minimum value to return
 * @param max maximum value to return
 * @return result
 */
export randInt = func(min, max) {
    return Math.round(Math.random() * (max - min) + min);
};

/**
 * returns -1, 0 or 1, depending on the sign of the number
 *
 * @return int
 */
export sgn = func(value) {
    return (value > 0) - (value < 0);
};
