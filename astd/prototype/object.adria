/*
 * Adria Standard Library
 *
 * Copyright (C) 2013 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var merge = require('./merge');

export extend = function() {
    merge(ObjectExtensions, Object);
    merge(ObjectExtensions.prototype, Object.prototype);
};

module ObjectExtensions = proto {

    /**
     * Object.merge
     *
     * merges properties of the given objects into this one

     * @param overwrite optional. if false, existing properties will no be overwritten
     * @param ... objects
     */
    merge: property {
        value: function(overwrite) {
            var overwrite = (overwrite === true || overwrite === false ? overwrite : undefined);
            var args = Array::slice.call(arguments, overwrite !== undefined ? 1 : 0);

            for (var argId, argValue in args) {
                var props = Object.getOwnPropertyNames(argValue);

                if (overwrite === false) {
                    for (var propId, propName in props) {
                        if (this.hasOwnProperty(propName) === false) {
                            Object.defineProperty(this, propName, Object.getOwnPropertyDescriptor(argValue, propName));
                        }
                    }
                } else {
                    for (var propId, propName in props) {
                        Object.defineProperty(this, propName, Object.getOwnPropertyDescriptor(argValue, propName));
                    }
                }
            }
        }
    },

    /**
     * provides a base clone method, returning a new object of this type without
     * calling the constructor. Chain to this method, then copy properties to the
     * result object as required
     *
     * @return object
     */
    clone: property {
        value: function() {
            return Object.create(Object.getPrototypeOf(this));
        },
        writable: true,
    },
};
