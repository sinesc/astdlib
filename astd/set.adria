/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * set type
 */
module Set = proto {

    /**
     * create new Set and add element, array of elements or set to it
     *
     * @param mixed value array, set or string
     */
    constructor: func(value) {

        this.data = Object.create(null);

        if (value != undefined) {
            this.add(value);
        }
    },

    /**
     * add element, array of elements or set to this set
     *
     * @param mixed value array, set or string
     */
    add: func(value) {

        assert(value instanceof Array || value instanceof Set || typeof value == 'string' || typeof value == 'number');

        var data = this.data;

        if (value instanceof Array) {

            value.forEach(func(element) {
                data[element] = true;
            });

        } else if (value instanceof Set) {

            for (var element in value.data) {
                data[element] = true;
            }

        } else {

            data[value] = true;
        }

        return this;
    },

    /**
     * remove element, array of elements or set from this set
     *
     * @param mixed value array, set or string
     */
    remove: func(value) {

        assert(value instanceof Array || value instanceof Set || typeof value == 'string' || typeof value == 'number');

        var data = this.data;

        if (value instanceof Array) {

            value.forEach(func(element) {
                delete data[element];
            });

        } else if (value instanceof Set) {

            for (var element in value.data) {
                delete data[element];
            }

        } else {
            delete data[value];
        }

        return this;
    },

    /**
     * check if set has single value or all values of array or set
     *
     * @param mixed value array, set or string
     * @return boolean
     */
    has: func(value) {

        assert(value instanceof Array || value instanceof Set || typeof value == 'string' || typeof value == 'number');

        var data = this.data;

        if (value instanceof Array) {

            for (var _, key in value) {
                if (key in data != true) {
                    return false;
                }
            }

            return true;

        } else if (value instanceof Set) {

            var other = value.data;

            for (var key in other) {
                if (key in data != true) {
                    return false;
                }
            }

            return true;

        } else {

            return (value in data);
        }
    },

    /**
     * check if set lacks single value or all values of array or set
     *
     * @param mixed value array, set or string
     * @return boolean
     */
    lacks: func(value) {
        return this.has(value) == false;
    },

    /**
     * check if set has single value or one or more values of array or set
     *
     * @param mixed value array, set or string
     * @return boolean
     */
    /*some: func(value) {

        var data = this.data;

        if (value instanceof Array) {

            for (var _, key in value) {
                if (key in data) {
                    return true;
                }
            }

            return false;

        } else if (value instanceof Set) {

            var other = value.data;

            for (var key in other) {
                if (key in data) {
                    return true;
                }
            }

            return false;

        } else {

            return (value in data);
        }
    },*/

    /**
     * returns key(s) missing in this set to equal another set or array
     *
     * @param mixed value array or set
     * @return boolean
     */
    /*missing: func(value) {

        var result = new Set();
        var data = this.data;

        if (value instanceof Array) {

            for (var _, key in value) {
                if (data[key] != true) {
                    result.add(key);
                }
            }

        } else if (value instanceof Set) {

            var other = value.data;

            for (var key in other) {
                if (data[key] != true) {
                    result.add(key);
                }
            }

        } else {

            throw new Error('invalid argument');
        }

        return result;
    },*/

    /**
     * returns relative complement of this set with given sets (all elements in this that are not
     * elements of any given set)
     *
     * @param Set, ...sets to intersect
     * @return Set resulting Set
     */
    difference: func(...sets) {

        var result = new Set();

        for (var key in this.data) {
            var add = true;
            for (var _, set in sets) {
                if (key in set.data) {
                    add = false;
                    break;
                }
            }
            result.add(key);
        }

        return result;
    },

    /**
     * returns intersection of this and given sets (all elements of this set that are also present
     * in all given sets)
     *
     * @param Set, ...sets to intersect
     * @return Set resulting Set
     */
    intersect: func(...sets) {

        var result = new Set();

        for (var key in this.data) {
            var add = true;

            for (var _, set in sets) {
                if (key in set.data != true) {
                    add = false;
                    break;
                }
            }

            if (add) {
                result.add(key);
            }
        }

        return result;
    },

    /**
     * returns union of this and given sets
     *
     * @param Set, ...sets to include in union
     * @return Set resulting Set
     */
    union: func(...sets) {

        var result = new Set();

        for (var key in this.data) {
            result.data[key] = true;
        }

        for (var _, set in sets) {
            for (var key in set.data) {
                result.data[key] = true;
            }
        }

        return result;
    },

    /**
     * return set values as array
     *
     * @return Array
     */
    toArray: func() {
        return Object.keys(this.data);
    },

    /**
     * check if the set is empty
     *
     * @return boolean
     */
    empty: prop {
        get : func() {
            for (var _ in this.data) {
                return false;
            }
            return true;
        },
    },

    /**
     * number of elements in set
     *
     * @return integer
     */
    length: prop {
        get : func() {
            var len = 0;
            for (var _ in this.data) {
                len++;
            }
            return len;
        },
    },

};