/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Set = require('./set');

/**
 * map type
 */
module Map = proto {

    /**
     * construct instance, optionally set element or add Map/Object to this Map
     *
     * @param mixed key string key, Map or Object
     * @param mixed value omit when key is a Map
     */
    constructor: func(key, value) {

        this.data = Object.create(null);

        if (key !== undefined) {
            this.set(key, value);
        }
    },

    /**
     * merge one or more maps with current and return result
     * does not modify this map
     *
     * @param Map, ... maps to merge
     * @return Map resulting Map
     */
    merge: func(...maps) {

        var result = new Map();

        for (var key, value in this.data) {
            result.data[key] = value;
        }

        for (var id in maps) {
            for (var key, value in maps[id].data) {
                result.data[key] = value;
            }
        }

        return result;
    },

    /**
     * set element or add Map/Object to this Map
     *
     * @param mixed key string key, Map or Object
     * @param mixed value omit when key is a Map
     */
    set: func(key, value) {

        var data = this.data;

        if (typeof key === 'object') {

            assert(value === undefined);
            var source = (key instanceof Map ? key.data : key);

            for (var mapKey, mapValue in source) {
                data[mapKey] = mapValue;
            }

        } else {

            data[key] = value;
        }

        return this;
    },

    /**
     * increment given key by value. sets key to value if it doesn't exist yet
     *
     * @param scalar key
     * @param finite value
     */
    inc: func(scalar key, finite value = 1) {

        if (key in this.data) {
            this.data[key]++;
        } else {
            this.data[key] = value;
        }
    },

    /**
     * returns a value from the map
     *
     * @param scalar key
     */
    get: func(scalar key) {

        if (this.lacks(key)) {
            throw new Exception('key "' + key + '" not defined in map');
        }

        return this.data[key];
    },

    /**
     * remove element, array of elements or Set from this Map
     *
     * @param any key array, set or string
     */
    unset: func(key) {

        var data = this.data;

        if (key instanceof Array) {

            for (var _, item in key) {
                delete data[item];
            }

        } else if (key instanceof Set) {

            for (var item in key.data) {
                delete data[item];
            }

        } else {

            delete data[key];
        }

        return this;
    },

    /**
     * check if map has single key, all values of array or set
     *
     * @param key mixed key array, set or string
     * @return boolean
     */
    has: func(key) {

        var data = this.data;

        if (key instanceof Array) {

            for (var _, item in key) {
                if (item in data !== true) {
                    return false;
                }
            }

            return true;

        } else if (key instanceof Set) {

            for (var item in key.data) {
                if (item in data !== true) {
                    return false;
                }
            }

            return true;

        } else {

            return (key in data);
        }
    },

    /**
     * check if map lacks single key, all values of array or set
     *
     * @param key mixed key array, set or string
     * @return boolean
     */
    lacks: func(key) {
        return this.has(key) === false;
    },

    /**
     * return map keys as array
     *
     * @return Array
     */
    keys: func() {
        return Object.keys(this.data);
    },

    /**
     * return map values as array
     *
     * @return Array
     */
    values: func() {

        var result = [];

        for (var _, value in this.data) {
            result.push(value);
        }

        return result;
    },

    /**
     * check if the map is empty
     *
     * @return boolean
     */
    empty: prop {
        get: func() {
            for (var _ in this.data) {
                return false;
            }
            return true;
        },
    },

    /**
     * number of elements in map
     *
     * @return integer
     */
    length: prop {
        get : func() {
            var len = 0;
            for (var _ in this.data) {
                len++;
            }
            return len;
        },
    },

    /**
     * returns first map key with given searchValue
     *
     * @param string searchValue
     * @param any notFoundResult returned when value is not found
     */
    find: func(searchValue, notFoundResult = undefined) {

        for (var key, value in this.data) {
            if (value === searchValue) {
                return key;
            }
        }

        return notFoundResult;
    },

};