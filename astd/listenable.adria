/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var util = require('./util');
var InvalidArgumentException = require('./exceptions').InvalidArgumentException;
var ArrayExtensions = require('./prototype/array');

module Listenable = proto {

    _listener: prop {
        value: null,
        writable: true,
    },

    /**
     * subscribe to all events by given listenable, attaching this listenable's
     * on<Event> methods to listenable's <event>'s
     *
     * @param listenable
     */
    subscribe: func(listenable) {

        assert(listenable instanceof Listenable);

        initListener.call(listenable, '_');
        var listener = new Listener([ ], this, null, false);
        listenable._listener['_'].push(listener);
        return listener;
    },

    /**
     * unsubscribe from given listener
     *
     * @param listenable
     */
    unsubscribe: func(listenable) {

        offCallback(listenable._listener['_'], this, null);
    },

    /**
     * triggers given event and notifies listeners (synchronous)
     *
     * @param eventName event to trigger
     * @param ... optional parameters passed to listeners
     */
    execute: func(eventName, ...args) {

        if (this._listener == null || (this._listener[eventName] == undefined && this._listener['_'] == undefined)) {
            return;
        }

        // handle listeners

        var eventListener = this._listener[eventName];

        if (eventListener != undefined) {

            var id = eventListener.length;

            while (id--) {
                var listener = eventListener[id];
                listener.callback.apply(listener.context, listener.params.concat(args));

                if (listener.once) {
                    this.off(eventName, listener.context, listener.callback);
                }
            }
        }

        // handle subscribers

        eventListener = this._listener['_'];

        if (eventListener != undefined) {

            var methodName = 'on' + eventName.charAt(0).toUpperCase() + eventName.slice(1);
            var method;

            for (var id, listener in eventListener) {

                method = listener.context[methodName];

                if (typeof method == 'function') {
                    method.apply(listener.context, args);
                }
            }
        }
    },

    /**
     * forward call to Listenable event
     *
     * @param string eventName
     * @param ...args additional arguments to pass to event handler before the event arguments
     * @return func function that when called will execute the given event
     */
    forward: func(eventName, ...args) {

        var bindArgs = [ this, eventName ];
        bindArgs.push.apply(bindArgs, args);
        return this.execute.bind.apply(this.execute, bindArgs);
    },

    /**
     * triggers given event and notifies listeners (async)
     *
     * @see execute
     */
    trigger: func(...args) {
        util.defer(this, args, this.execute);
    },

    /**
     * subscribe to given event
     *
     * @param string eventName
     * @param Array params optional parameters to pass as first arguments to listener
     * @param mixed context optional context to run listener in
     * @param function callback called when the event is triggered
     */
    on: func(eventName, [ [ params = [] ], context = this ], callback) {

        if (expand.call(this, this.on, 0, eventName, params, context, callback)) {
            return;
        }

        assert(typeof eventName == 'string');
        assert(params instanceof Array);
        assert(context == null || context instanceof Object);
        assert(typeof callback == 'function');

        initListener.call(this, eventName);
        this._listener[eventName].push(new Listener(params, context, callback, false));
    },

    /**
     * subscribe to given event and unsubscribe once triggered
     *
     * @see Listenable::on()
     */
    once: func(eventName, [ [ params = [] ], context = this ], callback) {

        if (expand.call(this, this.once, 0, eventName, params, context, callback)) {
            return;
        }

        assert(typeof eventName == 'string');
        assert(params instanceof Array);
        assert(context == null || context instanceof Object);
        assert(typeof callback == 'function');

        initListener.call(this, eventName);
        this._listener[eventName].push(new Listener(params, context, callback, true));
    },

    /**
     * unsubscribe from given event, @see Listenable::on() for parameter descriptions
     *
     * @param eventName
     * @param context
     * @param callback
     */
    off: func(eventName, context, callback) {

        if (expand.call(this, this.off, 0, eventName, context, callback)) {
            return;
        }

        // check if anything is registered at all

        assert(typeof eventName == 'string');

        if (this._listener == null || this._listener[eventName] == undefined) {
            return false;
        }

        if (callback == undefined) {

            if (context instanceof Listener) {
                return offListener(this._listener[eventName], context);
            } else if (typeof context == 'function') {
                return offCallback(this._listener[eventName], this, context);
            } else if (context == undefined) {
                delete this._listener[eventName];
                return true;
            } else  {
                throw new InvalidArgumentException('expected Listener or Function as argument 2');
            }

        } else {

            return offCallback(this._listener[eventName], context, callback);
        }
    },
};

/**
 * @proto Listener
 *
 * stores information about how to invoke a registered listener
 */
export Listener = proto {

    params      : null,
    context     : null,
    callback    : null,
    once        : false,

    constructor: func(params, context, callback, once) {

        assert(params instanceof Array);
        assert(context instanceof Object);
        assert(typeof callback == 'function' || callback == null);
        assert(once == true || once == false);

        this.params = params;
        this.context = context;
        this.callback = callback;
        this.once = once;
    },
};

/**
 * expands given function argument from array to multiple calls per array item
 *
 * @param func fn function to expand
 * @param finite expansionArgId id of argument to expand if array
 * @param ...args arguments to apply to each expanded call
 */
var expand = func(func fn, finite expansionArgId, ...args) {

    var expansionArgs = args[expansionArgId];

    if (expansionArgs instanceof Array) {
        for (var i = 0, len = expansionArgs.length; i < len; i++) {
            args[expansionArgId] = expansionArgs[i];
            fn.apply(this, args);
        }
        return true;
    }

    return false;
};

/**
 * ensures instance properties a set up to listen to given event
 *
 * @param string eventName
 */
var initListener = func(eventName) {

    if (this._listener == null) {
        this._listener = { };
    }

    if (this._listener[eventName] == undefined) {
        this._listener[eventName] = [ ];
    }
};

/**
 * remove listener by listener object
 *
 * @param Array eventListener array of listeners from which to remove given listener
 * @param Listener listener
 * @return boolean true if a listener was removed
 */
var offListener = func(eventListener, listener) {

    assert(listener instanceof Listener);

    var id = eventListener.length;

    while (id--) {
        if (eventListener[id] == listener) {
            ArrayExtensions::remove.call(eventListener, id);
            return true;
        }
    }

    return false;
};

/**
 * remove listener by context and callback
 *
 * @param Array eventListener array of listeners from which to remove given listener
 * @param Object context
 * @param function callback
 * @return boolean true if a listener was removed
 */
var offCallback = func(eventListener, context, callback) {

    assert(context instanceof Object);
    assert(typeof callback == 'function' || callback == null);

    var id = eventListener.length;

    while (id--) {
        if (eventListener[id].context == context && eventListener[id].callback == callback) {
            ArrayExtensions::remove.call(eventListener, id);
            return true;
        }
    }

    return false;
};
