/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
module Random = proto {

    /**
     * create new instance
     *
     * @param finite seed initial seed
     */
    constructor: func(finite seed = Math.random()) {
        this.seed = seed;
    },

    /**
     * internal seed state
     */
    _current: 1,

    /**
     * set or get the original seed
     * @param value any finite numeric
     */
    seed: prop {
        default: 1,
        get: func() {
            return storage;
        },
        set: func(finite value) {
            storage = value;
            this._current = value;
        },
    },

    /**
     * resets the sequence
     */
    reset: func() {
        var tmp = this.seed;
        this.seed = tmp;
    },

    /**
     * returns a random float between 0 and 1 (exclusive)
     * !todo needs actual prng algorithm. current implementation prefers 0/1
     */
    get: func() {
        var value = Math.sin(this._current++) * 100000;
        return value - Math.floor(value);
    },

    /**
     * returns a random float between min and max (exclusive)
     */
    float: func(finite min, finite max) {
        return this.get() * (max - min) + min;
    },

    /**
     * returns a random integer between min and max (exclusive)
     */
    int: func(finite min, finite max) {
        return Math.floor(this.get() * (max - min) + min);
    },

    /**
     * random integer up to range -1 with a linear preference for high numbers
     *
     * @param finite range
     * @return finite result
     */
    floatLinearMax: func(finite range) {
        return Math.sqrt(this.get() * range * range);
    },

    /**
     * random integer up to range -1 with a linear preference for low numbers
     *
     * @param finite range
     * @return finite result
     */
    floatLinearMin: func(finite range) {
        return range - Math.sqrt(this.get() * range * range);
    },

    /**
     * random integer up to range -1 with a linear preference for high numbers
     *
     * @param finite range
     * @return finite result
     */
    intLinearMax: func(finite range) {
        return Math.floor(Math.sqrt(this.get() * range * range));
    },

    /**
     * random integer up to range -1 with a linear preference for low numbers
     *
     * @param finite range
     * @return finite result
     */
    intLinearMin: func(finite range) {
        return Math.floor(range - Math.sqrt(this.get() * range * range));
    },

    /**
     * random integer up to range -1 with a power of n preference for high numbers
     *
     * @param finite range
     * @param finite power
     * @return finite result
     */
    floatPowerMax: func(finite range, finite power) {
        return Math.pow(this.get() * Math.pow(range, power), 1 / power);
    },

    /**
     * random integer up to range -1 with a power of n preference for low numbers
     *
     * @param finite range
     * @param finite power
     * @return finite result
     */
    floatPowerMin: func(finite range, finite power) {
        return range - Math.pow(this.get() * Math.pow(range, power), 1 / power);
    },

    /**
     * random integer up to range -1 with a power of n preference for high numbers
     *
     * @param finite range
     * @param finite power
     * @return finite result
     */
    intPowerMax: func(finite range, finite power) {
        return Math.floor(Math.pow(this.get() * Math.pow(range, power), 1 / power));
    },

    /**
     * random integer up to range -1 with a power of n preference for low numbers
     *
     * @param finite range
     * @param finite power
     * @return finite result
     */
    intPowerMin: func(finite range, finite power) {
        return Math.floor(range - Math.pow(this.get() * Math.pow(range, power), 1 / power));
    },

    /**
     * picks a random item from given item table
     *
     * @param itemTable object { itemKey.1 : itemChance.1, itemKey.2 : itemChance.2, ... } with sum(itemChance) < = 1
     * @return itemKey or null if total chance < 1 and algorithm did not select an item
     */
    pick: func(object itemTable) {

        var chance = this.get();
        var total = 0;

        for (var id in itemTable) {

            total += itemTable[id];

            if (chance >= (total- itemTable[id]) && chance <= total) {
                return id;
            }
        }

        return null;
    },
};