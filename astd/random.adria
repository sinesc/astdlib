/*
 * Adria Standard Library
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
module Random = proto {

    /**
     * internal seed state
     */
    _current: 1,

    /**
     * set or get the original seed
     * @param value any finite numeric
     */
    seed: prop {
        default: 1,
        get: func() {
            return storage;
        },
        set: func(finite value) {
            storage = value;
            this._current = value;
        },
    },

    /**
     * returns a random float between 0 and 1 (exclusive)
     */
    get: func() {
        var value = Math.sin(this._current++) * 10000;
        return value - Math.floor(value);
    },

    /**
     * returns a random float between min and max (exclusive)
     */
    float: func(finite min, finite max) {
        var value = Math.sin(this._current++) * 10000;
        return (value - Math.floor(value)) * (max - min) + min;
    },

    /**
     * returns a random integer between min and max (exclusive)
     */
    int: func(finite min, finite max) {
        var value = Math.sin(this._current++) * 10000;
        return Math.floor((value - Math.floor(value)) * (max - min) + min);
    },

};